<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:GTransfer.ViewModels" 
                    xmlns:Vc="clr-namespace:GTransfer.Converters"
                    xmlns:Lib="clr-namespace:GTransfer.Library">
    <Style x:Key="TreeItemContainerStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="BorderThickness" Value="1.5"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected,Mode=TwoWay}"></Setter>
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="Black"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="LightGray"/>
            </MultiTrigger>
        </Style.Triggers>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="2"/>
            </Style>
        </Style.Resources>
    </Style>
    <Style x:Key="SearchableTreeView" TargetType="{x:Type TreeView}">
        <Style.Resources>

            <LinearGradientBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFD9F4FF" Offset="0"/>
                <GradientStop Color="#FF9BDDFB" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="{x:Static SystemColors.ControlBrushKey}" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFEEEDED" Offset="0"/>
                <GradientStop Color="#FFDDDDDD" Offset="1"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
           
        </Style.Resources>

        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="ItemContainerStyle" Value="{StaticResource TreeItemContainerStyle}"/>
    </Style>
    

    <Style x:Key="ComboBoxWithImage" TargetType="{x:Type Border}">
        <Style.Resources>
            <ElasticEase x:Key="easeInEase" EasingMode="EaseOut" Oscillations="2" Springiness="7"/>
            <SineEase x:Key="easeOutEase" EasingMode="EaseIn"/>
        </Style.Resources>

        <!--<Setter Property="Width" Value="200"/>-->
        <Setter Property="Height" Value="30"/>
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="4 4 4 4"/>
        <Setter Property="CornerRadius" Value="3"/>
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#F0F0F0" Offset="0.0" />
                    <GradientStop Color="#C0C0C0" Offset="1.0" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>

        <!--<Style.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="(Border.Width)" EasingFunction="{StaticResource ResourceKey=easeInEase}" To="200" Duration="0:0:1.0"/>
                        <DoubleAnimation Storyboard.TargetProperty="(Border.Height)" EasingFunction="{StaticResource ResourceKey=easeInEase}" To="30" Duration="0:0:1.0"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="(Border.Width)" EasingFunction="{StaticResource ResourceKey=easeOutEase}" To="16" Duration="0:0:0.2"/>
                        <DoubleAnimation Storyboard.TargetProperty="(Border.Height)" EasingFunction="{StaticResource ResourceKey=easeOutEase}" To="16" Duration="0:0:0.2"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>-->
    </Style>
    
    <ControlTemplate x:Key="ProductTreeViewItemTemplate" TargetType="{x:Type TreeViewItem}">
    	<Grid>
    		<Grid.ColumnDefinitions>
    			<ColumnDefinition MinWidth="19" Width="Auto"/>
    			<ColumnDefinition Width="Auto"/>
    			<ColumnDefinition Width="*"/>
    		</Grid.ColumnDefinitions>
    		<Grid.RowDefinitions>
    			<RowDefinition Height="Auto"/>
    			<RowDefinition/>
    		</Grid.RowDefinitions>
    		<ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
    			<ToggleButton.Style>
    				<Style TargetType="{x:Type ToggleButton}">
    					<Setter Property="Focusable" Value="False"/>
    					<Setter Property="Width" Value="16"/>
    					<Setter Property="Height" Value="16"/>
    					<Setter Property="Template">
    						<Setter.Value>
    							<ControlTemplate TargetType="{x:Type ToggleButton}">
    								<Border Background="Transparent" Height="16" Padding="5" Width="16">
    									<Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Fill="White" Stroke="#FF818181">
    										<Path.RenderTransform>
    											<RotateTransform Angle="135" CenterY="3" CenterX="3"/>
    										</Path.RenderTransform>
    									</Path>
    								</Border>
    								<ControlTemplate.Triggers>
    									<Trigger Property="IsChecked" Value="True">
    										<Setter Property="RenderTransform" TargetName="ExpandPath">
    											<Setter.Value>
    												<RotateTransform Angle="180" CenterY="3" CenterX="3"/>
    											</Setter.Value>
    										</Setter>
    										<Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
    										<Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
    									</Trigger>
    									<Trigger Property="IsMouseOver" Value="True">
    										<Setter Property="Stroke" TargetName="ExpandPath" Value="#FF27C7F7"/>
    										<Setter Property="Fill" TargetName="ExpandPath" Value="#FFCCEEFB"/>
    									</Trigger>
    									<MultiTrigger>
    										<MultiTrigger.Conditions>
    											<Condition Property="IsMouseOver" Value="True"/>
    											<Condition Property="IsChecked" Value="True"/>
    										</MultiTrigger.Conditions>
    										<Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1CC4F7"/>
    										<Setter Property="Fill" TargetName="ExpandPath" Value="#FF82DFFB"/>
    									</MultiTrigger>
    								</ControlTemplate.Triggers>
    							</ControlTemplate>
    						</Setter.Value>
    					</Setter>
    				</Style>
    			</ToggleButton.Style>
    		</ToggleButton>
    		<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
    			<ContentPresenter x:Name="PART_Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
    		</Border>
    		<ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
    	</Grid>
    	<ControlTemplate.Triggers>
    		<Trigger Property="IsExpanded" Value="False">
    			<Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
    		</Trigger>    		
    		<Trigger Property="IsSelected" Value="True">
    			<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
    			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
    		</Trigger>
    		<MultiTrigger>
    			<MultiTrigger.Conditions>
    				<Condition Property="IsSelected" Value="True"/>
    				<Condition Property="IsSelectionActive" Value="False"/>
    			</MultiTrigger.Conditions>
    			<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
    			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
    		</MultiTrigger>
    		<Trigger Property="IsEnabled" Value="False">
    			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    		</Trigger>
            <DataTrigger Binding="{Binding HasItems}" Value="false">
                <Setter TargetName="Expander" Property="Visibility" Value="Hidden"></Setter>
            </DataTrigger>
    	</ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>